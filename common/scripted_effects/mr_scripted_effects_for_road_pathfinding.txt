#flags used
#expansion_node - for provinces connected to capital
#pathways_exhausted - for provinces where all trade paths are exhausted
#pathfinding_RX - Pathfinding placeholder for Ring X
#pathfinding_P - Province is good for using as a path

pathfinder_effect = {
	#determines starting province
	random_owned_province = {
		limit = {
			OR = {
				AND = {
					is_capital = yes
					NOT = { has_province_flag = pathways_exhausted }
				}
				AND = {
					has_province_flag = expansion_node
					NOT = { has_province_flag = pathways_exhausted }
				}
			}
		}
		set_province_flag = pathfinding_P	
		#starts ring expansion preliminary
		every_neighbor_province = { set_province_flag = pathfinding_R1 } #every neighbor of expan. node or capital
	}
	if = {
		limit = {
			any_owned_province = {
				province_has_center_of_trade_of_level = 1
				has_province_flag = pathfinding_R1
			}
		}
		R1_reverse_pathfind_effect = yes
	}
	else = {
		every_owned_province = {  #every neighbor of R1 that isnt already flagged
			limit = { has_province_flag = pathfinding_R1 }
			every_neighbor_province = {
				limit = {
					NOT = { has_province_flag = pathfinding_R1 }
					NOT = { has_province_flag = expansion_node }
					is_capital = no
				}
				set_province_flag = pathfinding_R2
			}
		}
		if = {
			limit = {
				any_owned_province = {
					province_has_center_of_trade_of_level = 1
					has_province_flag = pathfinding_R2
				}
			}
			R2_reverse_pathfind_effect = yes
		}
		else = {
			every_owned_province = {  #every neighbor of R2 that isnt already flagged
				limit = { has_province_flag = pathfinding_R2 }
				every_neighbor_province = {
					limit = {
						NOT = { has_province_flag = pathfinding_R2 }
						NOT = { has_province_flag = pathfinding_R1 }
						NOT = { has_province_flag = expansion_node }
						is_capital = no
					}
					set_province_flag = pathfinding_R3
				}
			}
			if = {
				limit = {
					any_owned_province = {
						province_has_center_of_trade_of_level = 1
						has_province_flag = pathfinding_R3
					}
				}
				R3_reverse_pathfind_effect = yes
			}
			else = {
				every_owned_province = {  #every neighbor of R3 that isnt already flagged
					limit = { has_province_flag = pathfinding_R3 }
					every_neighbor_province = {
						limit = {
							NOT = { has_province_flag = pathfinding_R3 }
							NOT = { has_province_flag = pathfinding_R2 }
							NOT = { has_province_flag = pathfinding_R1 }
							NOT = { has_province_flag = expansion_node }
							is_capital = no
						}
						set_province_flag = pathfinding_R4
					}
				}
				if = {
					limit = {
						any_owned_province = {
							province_has_center_of_trade_of_level = 1
							has_province_flag = pathfinding_R4
						}
					}
					R4_reverse_pathfind_effect = yes
				}
				else = {
					every_owned_province = {  #every neighbor of R4 that isnt already flagged
						limit = { has_province_flag = pathfinding_R4 }
						every_neighbor_province = {
							limit = {
								NOT = { has_province_flag = pathfinding_R4 }
								NOT = { has_province_flag = pathfinding_R3 }
								NOT = { has_province_flag = pathfinding_R2 }
								NOT = { has_province_flag = pathfinding_R1 }
								NOT = { has_province_flag = expansion_node }
								is_capital = no
							}
							set_province_flag = pathfinding_R5
						}
					}
					if = {
						limit = {
							any_owned_province = {
								province_has_center_of_trade_of_level = 1
								has_province_flag = pathfinding_R5
							}
						}
						R5_reverse_pathfind_effect = yes
					}
					else = {
						every_owned_province = {  #every neighbor of R5 that isnt already flagged
							limit = { has_province_flag = pathfinding_R5 }
							every_neighbor_province = {
								limit = {
									NOT = { has_province_flag = pathfinding_R5 }
									NOT = { has_province_flag = pathfinding_R4 }
									NOT = { has_province_flag = pathfinding_R3 }
									NOT = { has_province_flag = pathfinding_R2 }
									NOT = { has_province_flag = pathfinding_R1 }
									NOT = { has_province_flag = expansion_node }
									is_capital = no
								}
								set_province_flag = pathfinding_R6
							}
						}
						if = {
							limit = {
								any_owned_province = {
									province_has_center_of_trade_of_level = 1
									has_province_flag = pathfinding_R6
								}
							}
							R6_reverse_pathfind_effect = yes
						}
						else = {
							every_owned_province = {  #every neighbor of R6 that isnt already flagged
								limit = { has_province_flag = pathfinding_R6 }
								every_neighbor_province = {
									limit = {
										NOT = { has_province_flag = pathfinding_R6 }
										NOT = { has_province_flag = pathfinding_R5 }
										NOT = { has_province_flag = pathfinding_R4 }
										NOT = { has_province_flag = pathfinding_R3 }
										NOT = { has_province_flag = pathfinding_R2 }
										NOT = { has_province_flag = pathfinding_R1 }
										NOT = { has_province_flag = expansion_node }
										is_capital = no
									}
									set_province_flag = pathfinding_R7
								}
							}
							if = {
								limit = {
									any_owned_province = {
										province_has_center_of_trade_of_level = 1
										has_province_flag = pathfinding_R7
									}
								}
								R7_reverse_pathfind_effect = yes
							}
						}
					}
				}
			}
		}
	}
	#7 rings should be enough for any distance between any two CoT's/Capitals
}

clear_remaining_flags_effect = {
	every_owned_province = {
		clr_province_flag = pathfinding_R1
		clr_province_flag = pathfinding_R2
		clr_province_flag = pathfinding_R3
		clr_province_flag = pathfinding_R4
		clr_province_flag = pathfinding_R5
		clr_province_flag = pathfinding_R6
		clr_province_flag = pathfinding_R7
	}
}

#does not require while loop because it just finds adj. prov.
R1_reverse_pathfind_effect = {
	random_owned_province = {
		limit = {
			province_has_center_of_trade_of_level = 1
			has_province_flag = pathfinding_R1
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = {
		limit = {
			OR = {
				is_capital = yes
				province_has_center_of_trade_of_level = 1
			}
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	clear_remaining_flags_effect = yes
}
R2_reverse_pathfind_effect = {
	random_owned_province = {
		limit = {
			province_has_center_of_trade_of_level = 1
			has_province_flag = pathfinding_R2
		}
		set_province_flag = pathfinding_P
	}
	every_owned_province = { #Eliminates R2
		limit = {
			has_province_flag = pathfinding_R2
			NOT = { has_province_flag = pathfinding_P }
		}
		clr_province_flag = pathfinding_R2
	}
	every_owned_province = { #eliminates R1
		limit = {
			has_province_flag = pathfinding_R1
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R2
				}
			}
		}
		clr_province_flag = pathfinding_R1
	}
	random_owned_province = { #selects R1 path
		limit = {
			has_province_flag = pathfinding_R1
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	clear_remaining_flags_effect = yes
}
R3_reverse_pathfind_effect = {
	random_owned_province = {
		limit = {
			province_has_center_of_trade_of_level = 1
			has_province_flag = pathfinding_R3
		}
		set_province_flag = pathfinding_P
	}
	every_owned_province = { #Eliminates R3
		limit = {
			has_province_flag = pathfinding_R3
			NOT = { has_province_flag = pathfinding_P }
		}
		clr_province_flag = pathfinding_R3
	}
	every_owned_province = { #eliminates R2
		limit = {
			has_province_flag = pathfinding_R2
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R3
				}
			}
		}
		clr_province_flag = pathfinding_R2
	}
	every_owned_province = { #eliminates R1
		limit = {
			has_province_flag = pathfinding_R1
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R2
				}
			}
		}
		clr_province_flag = pathfinding_R1
	}
	random_owned_province = { #selects R2 path
		limit = {
			has_province_flag = pathfinding_R2
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R1 path
		limit = {
			has_province_flag = pathfinding_R1
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	clear_remaining_flags_effect = yes
}
R4_reverse_pathfind_effect = {
	random_owned_province = {
		limit = {
			province_has_center_of_trade_of_level = 1
			has_province_flag = pathfinding_R4
		}
		set_province_flag = pathfinding_P
	}
	every_owned_province = { #Eliminates R4
		limit = {
			has_province_flag = pathfinding_R4
			NOT = { has_province_flag = pathfinding_P }
		}
		clr_province_flag = pathfinding_R4
	}
	every_owned_province = { #eliminates R3
		limit = {
			has_province_flag = pathfinding_R3
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R4
				}
			}
		}
		clr_province_flag = pathfinding_R3
	}
	every_owned_province = { #eliminates R2
		limit = {
			has_province_flag = pathfinding_R2
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R3
				}
			}
		}
		clr_province_flag = pathfinding_R2
	}
	every_owned_province = { #eliminates R1
		limit = {
			has_province_flag = pathfinding_R1
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R2
				}
			}
		}
		clr_province_flag = pathfinding_R1
	}
	random_owned_province = { #selects R3 path
		limit = {
			has_province_flag = pathfinding_R3
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R2 path
		limit = {
			has_province_flag = pathfinding_R2
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R1 path
		limit = {
			has_province_flag = pathfinding_R1
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	clear_remaining_flags_effect = yes
}
R5_reverse_pathfind_effect = {
	random_owned_province = {
		limit = {
			province_has_center_of_trade_of_level = 1
			has_province_flag = pathfinding_R5
		}
		set_province_flag = pathfinding_P
	}
	every_owned_province = { #Eliminates R5
		limit = {
			has_province_flag = pathfinding_R5
			NOT = { has_province_flag = pathfinding_P }
		}
		clr_province_flag = pathfinding_R5
	}
	every_owned_province = { #eliminates R4
		limit = {
			has_province_flag = pathfinding_R4
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R5
				}
			}
		}
		clr_province_flag = pathfinding_R4
	}
	every_owned_province = { #eliminates R3
		limit = {
			has_province_flag = pathfinding_R3
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R4
				}
			}
		}
		clr_province_flag = pathfinding_R3
	}
	every_owned_province = { #eliminates R2
		limit = {
			has_province_flag = pathfinding_R2
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R3
				}
			}
		}
		clr_province_flag = pathfinding_R2
	}
	every_owned_province = { #eliminates R1
		limit = {
			has_province_flag = pathfinding_R1
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R2
				}
			}
		}
		clr_province_flag = pathfinding_R1
	}
	random_owned_province = { #selects R4 path
		limit = {
			has_province_flag = pathfinding_R4
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R3 path
		limit = {
			has_province_flag = pathfinding_R3
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R2 path
		limit = {
			has_province_flag = pathfinding_R2
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R1 path
		limit = {
			has_province_flag = pathfinding_R1
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	clear_remaining_flags_effect = yes
}
R6_reverse_pathfind_effect = {
	random_owned_province = {
		limit = {
			province_has_center_of_trade_of_level = 1
			has_province_flag = pathfinding_R6
		}
		set_province_flag = pathfinding_P
	}
	every_owned_province = { #Eliminates R6
		limit = {
			has_province_flag = pathfinding_R6
			NOT = { has_province_flag = pathfinding_P }
		}
		clr_province_flag = pathfinding_R6
	}
	every_owned_province = { #eliminates R5
		limit = {
			has_province_flag = pathfinding_R5
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R6
				}
			}
		}
		clr_province_flag = pathfinding_R5
	}
	every_owned_province = { #eliminates R4
		limit = {
			has_province_flag = pathfinding_R4
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R5
				}
			}
		}
		clr_province_flag = pathfinding_R4
	}
	every_owned_province = { #eliminates R3
		limit = {
			has_province_flag = pathfinding_R3
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R4
				}
			}
		}
		clr_province_flag = pathfinding_R3
	}
	every_owned_province = { #eliminates R2
		limit = {
			has_province_flag = pathfinding_R2
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R3
				}
			}
		}
		clr_province_flag = pathfinding_R2
	}
	every_owned_province = { #eliminates R1
		limit = {
			has_province_flag = pathfinding_R1
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R2
				}
			}
		}
		clr_province_flag = pathfinding_R1
	}
	random_owned_province = { #selects R5 path
		limit = {
			has_province_flag = pathfinding_R5
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R4 path
		limit = {
			has_province_flag = pathfinding_R4
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R3 path
		limit = {
			has_province_flag = pathfinding_R3
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R2 path
		limit = {
			has_province_flag = pathfinding_R2
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R1 path
		limit = {
			has_province_flag = pathfinding_R1
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	clear_remaining_flags_effect = yes
}
R7_reverse_pathfind_effect = {
	random_owned_province = {
		limit = {
			province_has_center_of_trade_of_level = 1
			has_province_flag = pathfinding_R7
		}
		set_province_flag = pathfinding_P
	}
	every_owned_province = { #Eliminates R7
		limit = {
			has_province_flag = pathfinding_R7
			NOT = { has_province_flag = pathfinding_P }
		}
		clr_province_flag = pathfinding_R7
	}
	every_owned_province = { #eliminates R6
		limit = {
			has_province_flag = pathfinding_R6
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R7
				}
			}
		}
		clr_province_flag = pathfinding_R6
	}
	every_owned_province = { #eliminates R5
		limit = {
			has_province_flag = pathfinding_R5
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R6
				}
			}
		}
		clr_province_flag = pathfinding_R5
	}
	every_owned_province = { #eliminates R4
		limit = {
			has_province_flag = pathfinding_R4
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R5
				}
			}
		}
		clr_province_flag = pathfinding_R4
	}
	every_owned_province = { #eliminates R3
		limit = {
			has_province_flag = pathfinding_R3
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R4
				}
			}
		}
		clr_province_flag = pathfinding_R3
	}
	every_owned_province = { #eliminates R2
		limit = {
			has_province_flag = pathfinding_R2
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R3
				}
			}
		}
		clr_province_flag = pathfinding_R2
	}
	every_owned_province = { #eliminates R1
		limit = {
			has_province_flag = pathfinding_R1
			NOT = {
				any_neighbor_province = {
					has_province_flag = pathfinding_R2
				}
			}
		}
		clr_province_flag = pathfinding_R1
	}
	random_owned_province = { #selects R6 path
		limit = {
			has_province_flag = pathfinding_R6
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R5 path
		limit = {
			has_province_flag = pathfinding_R5
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R4 path
		limit = {
			has_province_flag = pathfinding_R4
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R3 path
		limit = {
			has_province_flag = pathfinding_R3
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R2 path
		limit = {
			has_province_flag = pathfinding_R2
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	random_owned_province = { #selects R1 path
		limit = {
			has_province_flag = pathfinding_R1
			any_neighbor_province = {
				has_province_flag = pathfinding_P
			}
		}
		set_province_flag = pathfinding_P
	}
	clear_remaining_flags_effect = yes
}
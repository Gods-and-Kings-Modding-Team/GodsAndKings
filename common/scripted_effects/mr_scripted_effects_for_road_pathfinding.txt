#flags used
#expansion_node - for provinces connected to capital
#pathways_exhausted - for provinces where all trade paths are exhausted
#pathfinding_RX - Pathfinding placeholder for Ring X
#pathfinding_F - Province has been ruled out
#pathfinding_T - Province is being used to test a path
#pathfinding_G - Province is good for using as a path

pathfinder_effect = {
	#determines starting province
	random_owned_province = {
		limit = {
			OR = {
				AND = {
					is_capital = yes
					has_province_flag = pathways_exhausted
				}
				AND = {
					has_province_flag = expansion_node
					has_province_flag = pathways_exhausted
				}
			}
		}
		#starts ring expansion preliminary
		every_neighbor_province = { set_province_flag = pathfinding_R1 } #every neighbor of expan. node or capital
	}	
	every_owned_province = {  #every neighbor of R1 that isnt already flagged
		limit = { has_province_flag = pathfinding_R1 }
		every_neighbor_province = {
			limit = {
				NOT = { has_province_flag = pathfinding_R1 }
				NOT = { has_province_flag = expansion_node }
				is_capital = no
			}
			set_province_flag = pathfinding_R2
		}
	}
	every_owned_province = {  #every neighbor of R2 that isnt already flagged
		limit = { has_province_flag = pathfinding_R2 }
		every_neighbor_province = {
			limit = {
				NOT = { has_province_flag = pathfinding_R2 }
				NOT = { has_province_flag = pathfinding_R1 }
				NOT = { has_province_flag = expansion_node }
				is_capital = no
			}
			set_province_flag = pathfinding_R3
		}
	}
	every_owned_province = {  #every neighbor of R3 that isnt already flagged
		limit = { has_province_flag = pathfinding_R3 }
		every_neighbor_province = {
			limit = {
				NOT = { has_province_flag = pathfinding_R3 }
				NOT = { has_province_flag = pathfinding_R2 }
				NOT = { has_province_flag = pathfinding_R1 }
				NOT = { has_province_flag = expansion_node }
				is_capital = no
			}
			set_province_flag = pathfinding_R4
		}
	}
	every_owned_province = {  #every neighbor of R4 that isnt already flagged
		limit = { has_province_flag = pathfinding_R4 }
		every_neighbor_province = {
			limit = {
				NOT = { has_province_flag = pathfinding_R4 }
				NOT = { has_province_flag = pathfinding_R3 }
				NOT = { has_province_flag = pathfinding_R2 }
				NOT = { has_province_flag = pathfinding_R1 }
				NOT = { has_province_flag = expansion_node }
				is_capital = no
			}
			set_province_flag = pathfinding_R5
		}
	}
	every_owned_province = {  #every neighbor of R5 that isnt already flagged
		limit = { has_province_flag = pathfinding_R5 }
		every_neighbor_province = {
			limit = {
				NOT = { has_province_flag = pathfinding_R5 }
				NOT = { has_province_flag = pathfinding_R4 }
				NOT = { has_province_flag = pathfinding_R3 }
				NOT = { has_province_flag = pathfinding_R2 }
				NOT = { has_province_flag = pathfinding_R1 }
				NOT = { has_province_flag = expansion_node }
				is_capital = no
			}
			set_province_flag = pathfinding_R6
		}
	}
	every_owned_province = {  #every neighbor of R6 that isnt already flagged
		limit = { has_province_flag = pathfinding_R6 }
		every_neighbor_province = {
			limit = {
				NOT = { has_province_flag = pathfinding_R6 }
				NOT = { has_province_flag = pathfinding_R5 }
				NOT = { has_province_flag = pathfinding_R4 }
				NOT = { has_province_flag = pathfinding_R3 }
				NOT = { has_province_flag = pathfinding_R2 }
				NOT = { has_province_flag = pathfinding_R1 }
				NOT = { has_province_flag = expansion_node }
				is_capital = no
			}
			set_province_flag = pathfinding_R7
		}
	}
	#7 rings should be enough for any distance between any two CoT's/Capitals
	
	if = {
		limit = {
			any_owned_province = {
				has_province_flag = pathfinding_R1
				province_has_center_of_trade_of_level = 1
			}
		}
		#ring 1 search effect
		while = {
			limit = {
				any_owned_province = {
					has_province_flag = pathfinding_R1
					NOT = { has_province_flag = pathfinding_G }
				}
			}
			random_owned_province = {
				limit = { has_province_flag = pathfinding_R1 }
				if = {
					limit = { province_has_center_of_trade_of_level = 1 }
					set_province_flag = pathfinding_G
				}
				else = { set_province_flag = pathfinding_F }
			}
		}
	}
	else_if = {
		limit = {
			any_owned_province = {
				has_province_flag = pathfinding_R2
				province_has_center_of_trade_of_level = 1
			}
		}
		#ring 2 search effect
		while = { #will stop looping when an R2 prov is marked good
			limit = {
				any_owned_province = {
					has_province_flag = pathfinding_R2
					NOT = { has_province_flag = pathfinding_G }
				}
			}
			random_owned_province = { #while looping, it will pick a random R1 to test
				limit = {
					has_province_flag = pathfinding_R1
					any_neighbor_province = {
						NOT = { has_province_flag = pathfinding_F }
					}
				} #it will only pick R1 with valid neighbors
				set_province_flag = pathfinding_T
				while = {
					limit = {
						any_owned_province = {
							has_province_flag = pathfinding_R2
							NOT = { has_province_flag = pathfinding_F }
							any_neighbor_province = {
								has_province_flag = pathfinding_T
							}
						}
					}
					if = {
						limit = { province_has_center_of_trade_of_level = 1 }
						set_province_flag = pathfinding_G
						every_owned_province = {
							limit = { has_province_flag = pathfinding_T }
							set_province_flag = pathfinding_G
						}
					}
					else = { set_province_flag = pathfinding_F }
				}
			}
		}
	}
	else_if = {
		limit = {
			any_owned_province = {
				has_province_flag = pathfinding_R3
				province_has_center_of_trade_of_level = 1
			}
		}
		#ring 3 search effect
	}
	else_if = {
		limit = {
			any_owned_province = {
				has_province_flag = pathfinding_R4
				province_has_center_of_trade_of_level = 1
			}
		}
		#ring 4 search effect
	}
	else_if = {
		limit = {
			any_owned_province = {
				has_province_flag = pathfinding_R5
				province_has_center_of_trade_of_level = 1
			}
		}
		#ring 5 search effect
	}
	else_if = {
		limit = {
			any_owned_province = {
				has_province_flag = pathfinding_R6
				province_has_center_of_trade_of_level = 1
			}
		}
		#ring 6 search effect
	}
	else_if = {
		limit = {
			any_owned_province = {
				has_province_flag = pathfinding_R7
				province_has_center_of_trade_of_level = 1
			}
		}
		#ring 7 search effect
	}
}